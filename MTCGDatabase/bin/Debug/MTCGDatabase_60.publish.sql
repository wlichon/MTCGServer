/*
Deployment script for MTCG_DB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "MTCG_DB"
:setvar DefaultFilePrefix "MTCG_DB"
:setvar DefaultDataPath "C:\Users\wikto\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\wikto\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[MTCGCard].[isSpell] on table [dbo].[MTCGCard] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column Element on table [dbo].[MTCGCard] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[MTCGCard])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Rename refactoring operation with key 27fdd335-dd1d-4c11-bffc-93c3b7027aab, dceb28ec-990a-4aa2-b0aa-24f3fd3e2cd9 is skipped, element [dbo].[MTCGDeck].[Id] (SqlSimpleColumn) will not be renamed to DeckID';


GO
PRINT N'Rename refactoring operation with key 8af49ca1-91ee-4087-b08f-d030e8efe127 is skipped, element [dbo].[MTCGCard].[Index] (SqlSimpleColumn) will not be renamed to CardNumber';


GO
PRINT N'Rename refactoring operation with key 1461fedd-7edf-4447-9436-790652706bf7 is skipped, element [dbo].[FK_MTCGDeals_ToMTCGCard] (SqlForeignKeyConstraint) will not be renamed to [FK_Deal_ToCardID]';


GO
PRINT N'Rename refactoring operation with key b9ec00c4-6c56-4da1-a199-2e1ba4685b6c, 96ddf890-536b-406a-9142-9b928f0b9237 is skipped, element [dbo].[MTCGDeals].[Type] (SqlSimpleColumn) will not be renamed to isSpell';


GO
PRINT N'Rename refactoring operation with key 78087384-3b42-4751-892e-64785eea61e7 is skipped, element [dbo].[FK_MTCGUser_ToTable] (SqlForeignKeyConstraint) will not be renamed to [FK_FirstCard_ToCards]';


GO
PRINT N'Altering Table [dbo].[MTCGCard]...';


GO
ALTER TABLE [dbo].[MTCGCard] ALTER COLUMN [Element] NVARCHAR (50) NOT NULL;


GO
ALTER TABLE [dbo].[MTCGCard]
    ADD [isSpell]    BIT NOT NULL,
        [CardNumber] INT IDENTITY (1, 1) NOT NULL,
        [isTraded]   BIT DEFAULT 0 NOT NULL;


GO
PRINT N'Altering Table [dbo].[MTCGUser]...';


GO
ALTER TABLE [dbo].[MTCGUser]
    ADD [FirstCard]  NVARCHAR (50) NULL,
        [SecondCard] NVARCHAR (50) NULL,
        [ThirdCard]  NVARCHAR (50) NULL,
        [FourthCard] NVARCHAR (50) NULL,
        [Rating]     INT           DEFAULT 1500 NOT NULL,
        [Bio]        NVARCHAR (50) NULL,
        [Image]      NVARCHAR (50) NULL;


GO
PRINT N'Creating Table [dbo].[MTCGDeals]...';


GO
CREATE TABLE [dbo].[MTCGDeals] (
    [Id]          NVARCHAR (50) NOT NULL,
    [CardToTrade] NVARCHAR (50) NOT NULL,
    [isSpell]     BIT           NOT NULL,
    [MinDmg]      INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Deal_ToCardID]...';


GO
ALTER TABLE [dbo].[MTCGDeals] WITH NOCHECK
    ADD CONSTRAINT [FK_Deal_ToCardID] FOREIGN KEY ([CardToTrade]) REFERENCES [dbo].[MTCGCard] ([CardID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_FirstCard_ToCards]...';


GO
ALTER TABLE [dbo].[MTCGUser] WITH NOCHECK
    ADD CONSTRAINT [FK_FirstCard_ToCards] FOREIGN KEY ([FirstCard]) REFERENCES [dbo].[MTCGCard] ([CardID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_FourthCard_ToCards]...';


GO
ALTER TABLE [dbo].[MTCGUser] WITH NOCHECK
    ADD CONSTRAINT [FK_FourthCard_ToCards] FOREIGN KEY ([FourthCard]) REFERENCES [dbo].[MTCGCard] ([CardID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SecondCard_ToCards]...';


GO
ALTER TABLE [dbo].[MTCGUser] WITH NOCHECK
    ADD CONSTRAINT [FK_SecondCard_ToCards] FOREIGN KEY ([SecondCard]) REFERENCES [dbo].[MTCGCard] ([CardID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ThirdCard_ToCards]...';


GO
ALTER TABLE [dbo].[MTCGUser] WITH NOCHECK
    ADD CONSTRAINT [FK_ThirdCard_ToCards] FOREIGN KEY ([ThirdCard]) REFERENCES [dbo].[MTCGCard] ([CardID]);


GO
PRINT N'Altering Procedure [dbo].[acquire_package]...';


GO
ALTER PROCEDURE [dbo].[acquire_package]
	@Username nvarchar(50)
AS

BEGIN TRANSACTION


	IF((SELECT Coins
		 FROM dbo.MTCGUser
		 WHERE Username = @Username) < 5)
	BEGIN
		RAISERROR('Coin balance is too low',16,1);
		RETURN
	END

	IF((SELECT COUNT(*) from (SELECT top 5 * from dbo.MTCGCard WHERE Username is NULL) x) < 5)
	BEGIN
		RAISERROR('Not enough packs',16,1);
		RETURN
	END

	ELSE

	BEGIN

	UPDATE dbo.MTCGUser
	SET Coins = Coins - 5
	WHERE Username = @Username;

	WITH q AS
	(
	SELECT TOP 5 * FROM dbo.MTCGCard WHERE Username is NULL ORDER BY CardNumber ASC
	)
	UPDATE q
	SET Username = @Username
	
	END


COMMIT TRANSACTION
GO
PRINT N'Creating Procedure [dbo].[accept_trade]...';


GO
CREATE PROCEDURE [dbo].[accept_trade]
	@Username nvarchar(50),
	@TradeId nvarchar(50),
	@CardToTrade nvarchar(50)
AS

BEGIN TRANSACTION



	IF((SELECT COUNT(*)
		 FROM dbo.MTCGCard
		 WHERE Username = @Username AND CardID = @CardToTrade) = 0)
	BEGIN
		RAISERROR('Card is not in users possesion',16,1);
		RETURN
	END

	IF((SELECT COUNT(*)
		 FROM dbo.MTCGDeals
		 WHERE Id = @TradeId) = 0)
	BEGIN
		RAISERROR('Trade deal with provided Id does not exist',16,1);
		RETURN
	END
	DECLARE @DamageBuyer int;
	SET @DamageBuyer = (SELECT Damage FROM dbo.MTCGCard WHERE CardID = @CardToTrade);


	IF((SELECT MinDmg FROM dbo.MTCGDeals WHERE Id = @TradeId) > @DamageBuyer)
	BEGIN
		RAISERROR('Damage of offered card is too low',16,1);
		RETURN
	END

	IF((SELECT COUNT(*) from (SELECT FirstCard, SecondCard, ThirdCard, FourthCard
		FROM dbo.MTCGUser
		WHERE (FirstCard = @CardToTrade OR SecondCard = @CardToTrade OR ThirdCard = @CardToTrade OR FourthCard = @CardToTrade) AND Username = @Username) x) != 0)
	BEGIN
		RAISERROR('Card is registered in users deck therefore it cannot be traded',16,1);
		RETURN
	END

	DECLARE @SellerCard nvarchar(50);
	SET @SellerCard = (SELECT CardToTrade FROM dbo.MTCGDeals WHERE Id = @TradeId);

	IF( (SELECT isSpell FROM dbo.MTCGDeals WHERE Id = @TradeId) != (SELECT isSpell FROM dbo.MTCGCard WHERE CardID = @CardToTrade))
	BEGIN
		RAISERROR('Card does not match the requested type',16,1);
		RETURN
	END

	DECLARE @SellerOwner nvarchar(50);
	SET @SellerOwner = (SELECT Username FROM dbo.MTCGCard WHERE CardID = @SellerCard);

	IF( @SellerOwner = @Username)
	BEGIN
		RAISERROR('Cannot trade with yourself',16,1);
		RETURN
	END

	

	ELSE

	BEGIN

	
	

	
	UPDATE dbo.MTCGCard SET Username = @Username WHERE CardID = @SellerCard;

	UPDATE dbo.MTCGCard SET Username = @SellerOwner WHERE CardID = @CardToTrade;

	UPDATE dbo.MTCGCard SET isTraded = 0 WHERE CardID = @SellerCard;

	DELETE FROM dbo.MTCGDeals WHERE Id = @TradeId;
	
	END


COMMIT TRANSACTION
GO
PRINT N'Creating Procedure [dbo].[add_cards_to_deck]...';


GO
CREATE PROCEDURE [dbo].[add_cards_to_deck]
	@FirstCard nvarchar(50),
	@SecondCard nvarchar(50),
	@ThirdCard nvarchar(50),
	@FourthCard nvarchar(50),
	@Username nvarchar(50)
AS

BEGIN


	IF NOT EXISTS(SELECT * FROM dbo.MTCGCard WHERE CardID = @FirstCard AND Username = @Username AND isTraded = 0)
	BEGIN
		RAISERROR('Card 1 is not in users posession or is being traded',16,1);
		RETURN
	END

	IF NOT EXISTS(SELECT * FROM dbo.MTCGCard WHERE CardID = @SecondCard AND Username = @Username AND isTraded = 0)
	BEGIN
		RAISERROR('Card 2 is not in users posession or is being traded',16,1);
		RETURN
	END

	IF NOT EXISTS(SELECT * FROM dbo.MTCGCard WHERE CardID = @ThirdCard AND Username = @Username AND isTraded = 0)
	BEGIN
		RAISERROR('Card 3 is not in users posession or is being traded',16,1);
		RETURN
	END

	IF NOT EXISTS(SELECT * FROM dbo.MTCGCard WHERE CardID = @FourthCard AND Username = @Username AND isTraded = 0)
	BEGIN
		RAISERROR('Card 4 is not in users posession or is being traded',16,1);
		RETURN
	END

	UPDATE dbo.MTCGUser SET FirstCard = @FirstCard, SecondCard = @SecondCard, ThirdCard = @ThirdCard, FourthCard = @FourthCard WHERE Username = @Username


END
GO
PRINT N'Creating Procedure [dbo].[create_trade]...';


GO
CREATE PROCEDURE [dbo].[create_trade]
	@Username nvarchar(50),
	@Id nvarchar(50),
	@CardToTrade nvarchar(50),
	@isSpell bit,
	@MinDmg int
AS

BEGIN TRANSACTION


	IF((SELECT COUNT(*)
		 FROM dbo.MTCGCard
		 WHERE Username = @Username AND CardID = @CardToTrade) = 0)
	BEGIN
		RAISERROR('Card is not in users possesion',16,1);
		RETURN
	END

	IF((SELECT COUNT(*) from (SELECT  * from dbo.MTCGDeals WHERE Id = @Id) x) != 0)
	BEGIN
		RAISERROR('Trade deal with provided ID already exists',16,1);
		RETURN
	END

	IF((SELECT COUNT(*) from (SELECT FirstCard, SecondCard, ThirdCard, FourthCard
		FROM dbo.MTCGUser
		WHERE (FirstCard = @CardToTrade OR SecondCard = @CardToTrade OR ThirdCard = @CardToTrade OR FourthCard = @CardToTrade) AND Username = 'altenhof') x) != 0)
	BEGIN
		RAISERROR('Card is registered in users deck therefore it cannot be traded',16,1);
		RETURN
	END

	ELSE

	BEGIN

	INSERT INTO dbo.MTCGDeals (Id,CardToTrade,isSpell,MinDmg) values (@Id,@CardToTrade,@isSpell,@MinDmg)
	
	UPDATE dbo.MTCGCard SET isTraded = 1 WHERE CardID = @CardToTrade;
	
	END


COMMIT TRANSACTION
GO
PRINT N'Creating Procedure [dbo].[delete_db_records]...';


GO
CREATE PROCEDURE [dbo].[delete_db_records]
	
AS
	DELETE FROM dbo.MTCGCard;
	DELETE FROM dbo.MTCGUser;
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[delete_trade]...';


GO
CREATE PROCEDURE [dbo].[delete_trade]
	@Username nvarchar(50),
	@TradeId nvarchar(50)
	
AS

BEGIN TRANSACTION
	
	DECLARE @TradeCreator nvarchar(50);
	

	SET @TradeCreator = (SELECT Username FROM dbo.MTCGCard WHERE CardID = (SELECT CardToTrade FROM dbo.MTCGDeals WHERE Id = @TradeId));

	IF(@TradeCreator != @Username)
	BEGIN
		RAISERROR('You are not the creator of this trade, therefore you cannot delete it',16,1);
		RETURN
	END


	

	ELSE

	BEGIN

	DELETE FROM dbo.MTCGDeals WHERE Id = @TradeId;
	
	END


COMMIT TRANSACTION
GO
PRINT N'Refreshing Procedure [dbo].[reset_card_owners]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[reset_card_owners]';


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '27fdd335-dd1d-4c11-bffc-93c3b7027aab')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('27fdd335-dd1d-4c11-bffc-93c3b7027aab')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'dceb28ec-990a-4aa2-b0aa-24f3fd3e2cd9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('dceb28ec-990a-4aa2-b0aa-24f3fd3e2cd9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8af49ca1-91ee-4087-b08f-d030e8efe127')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8af49ca1-91ee-4087-b08f-d030e8efe127')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1461fedd-7edf-4447-9436-790652706bf7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1461fedd-7edf-4447-9436-790652706bf7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b9ec00c4-6c56-4da1-a199-2e1ba4685b6c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b9ec00c4-6c56-4da1-a199-2e1ba4685b6c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '96ddf890-536b-406a-9142-9b928f0b9237')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('96ddf890-536b-406a-9142-9b928f0b9237')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '78087384-3b42-4751-892e-64785eea61e7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('78087384-3b42-4751-892e-64785eea61e7')

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[MTCGDeals] WITH CHECK CHECK CONSTRAINT [FK_Deal_ToCardID];

ALTER TABLE [dbo].[MTCGUser] WITH CHECK CHECK CONSTRAINT [FK_FirstCard_ToCards];

ALTER TABLE [dbo].[MTCGUser] WITH CHECK CHECK CONSTRAINT [FK_FourthCard_ToCards];

ALTER TABLE [dbo].[MTCGUser] WITH CHECK CHECK CONSTRAINT [FK_SecondCard_ToCards];

ALTER TABLE [dbo].[MTCGUser] WITH CHECK CHECK CONSTRAINT [FK_ThirdCard_ToCards];


GO
PRINT N'Update complete.';


GO
